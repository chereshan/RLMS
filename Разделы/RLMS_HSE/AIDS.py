"""
ЗДЕСЬ ВСТАВИТЬ ДОКСТРИНГ ПОДМОДУЛЯ
Данный модуль содержит все функции, необходимые для имплементации AIDS-модели на данных домашних хозяйств RLMS. 
# Надо переименовать функции
"""

import pandas as pd


food_codebook={'e1.1': 'белый хлеб, кг.',
 'e1.2': 'черный хлеб, кг.',
 'e1.3': 'рис, другая крупа, кг.',
 'e1.4': 'мука, кг.',
 'e1.5': 'макаронные изделия, кг.',
 'e1.6': 'картофель, кг.',
 'e1.7': 'овощные консервы, без солений, кг.',
 'e1.8': 'капуста, включая квашеную, кг.',
 'e1.9': 'огурцы, включая соленые, кг.',
 'e1.10': 'помидоры, включая соленые, кг.',
 'e1.11': 'свеклу, морковь и другие корнеплоды, кг.',
 'e1.12': 'лук, чеснок, кг.',
 'e1.13': 'кабачки, тыквы и тому подобное, кг.',
 'e1.14': 'другие овощи, кг.',
 'e1.15': 'арбузы, дыни, включая соленые и сушеные, кг.',
 'e1.16': 'фруктово-ягодные консервы, кг.',
 'e1.17': 'свежие ягоды, кг.',
 'e1.18': 'свежие фрукты, кг.',
 'e1.19': 'сушеные фрукты и ягоды, кг.',
 'e1.20': 'орехи, семечки, кг.',
 'e1.21': 'мясные консервы, кг.',
 'e1.22': 'говядина, телятина, кг.',
 'e1.23': 'баранина, козлятина, кг.',
 'e1.24': 'свинина, кг.',
 'e1.25': 'субпродукты: печень, почки, кг.',
 'e1.26': 'птица, кг.',
 'e1.27': 'сало, другие животные жиры, кг.',
 'e1.28': 'колбасные изделия, копчености, кг.',
 'e1.29': 'мясных полуфабрикатов, кг.',
 'e1.30': 'молочные консервы, сухое молоко, кг.',
 'e1.31': 'молока, кроме сухого, л.',
 'e1.32': 'кисломолочные продукты: кефир, йогурт и другие, л.',
 'e1.33': 'сметана, сливки, л.',
 'e1.34': 'масло животное, кг.',
 'e1.35': 'творог, сырковая масса, кг.',
 'e1.36': 'сыр, брынза, кг.',
 'e1.37': 'мороженое, кг.',
 'e1.38': 'масло растительное, л.',
 'e1.39': 'маргарин, кг.',
 'e1.40': 'сахар, кг.',
 'e1.41': 'конфеты, шоколад, кг.',
 'e1.42': 'варенье, джем, кг.',
 'e1.43': 'меда, л.',
 'e1.44': 'печенье, пирожные, торты, вафли, пряники, сдобные булочки, кг.',
 'e1.45': 'яица, шт.',
 'e1.46': 'рыба свежая, мороженая, соленая, сушеная, рыбные полуфабрикаты, кг.',
 'e1.47': 'рыбные консервы, кг.',
 'e1.58': 'морепродукты, кг.',
 'e1.59': 'полуфабрикаты, не считая мясных и рыбных, кг.',
 'e1.48': 'чай, кг.',
 'e1.49': 'кофе, кофейные напитки, какао, кг.',
 'e1.50': 'безалкогольные напитки, соки, л.',
 'e1.51': 'соль, другие специи, различные соусы, кг. ',
 'e1.52': 'грибы, кг.',
 'e1.53': 'водка, л.',
 'e1.54': 'вино, другие ликероводочные изделия, л.',
 'e1.55': 'пиво, л.',
 'e1.56': 'табачные изделия, пачек'}

# Скорее всего стоит добавить е1.57 жевательные резинки и их несущественность как-то обрабатывать
#==========================================================================================
# Далее идут рутины чистки данных. Скорее всего нужно обозначение их не пользовательских функций

#==========================================================================================
"""

"""
#==========================================================================================
def renaming_routine(df1,rename_del):
#     ОЧЕНЬ СЫРАЯ ФУНКЦИЯ
    """
    Функция, которая принимает на входе датафрейм и переименовывает коды кодификатора RLMS на читаемые. В частности, удаляет код волны и перемиеновывает коды в читаемые.  
    
    Параметры
    ---------
    df1 : DataFrame
        Год волны исследования.
    rename_del: string
        Если значение 'wave' ...
        Если значение 'quest' ...
    
    
    """
    if rename_del=='wave':
        for i in range(len(df1.columns)):
            df1.rename(columns={ df1.columns[i]: df1.columns[i][1:]}, inplace = True)
        return df1
    if rename_del=='quest':
        for i in range(len(df1.columns)):
            df1.rename(columns={ df1.columns[i]: df1.columns[i][:-1]}, inplace = True)
        return df1
#==========================================================================================    
def renaming_routine_names(df1):
    """
    Функция, которая комбинирует удаление кода в именах столбцов и переименование кодов. 
    
    Параметры
    ---------
    df1 : DataFrame
        Год волны исследования.
    
    
    """
    df1=renaming_routine(df1,'wave')
    df1=renaming_routine(df1,'quest')
    df1.rename(columns=codebook,inplace=True)
    return df1

#==========================================================================================

def cleaning_routine(dfvar_1,dfvar_2):
    """
    В датафрейме цен и количеств есть некорректные ответы и пропуски. Пропуски необходимо занулить, а не наблюдения с некорректными ответами дропнуть из датаферйма. 
    На практике функция принимает датафрейм расходов и количеств и чистит датафрейм так, чтобы на его основе можно было получить датафрейм индивидуальных цен, т.е. удаляетнаблюдения с ненулевыми расходами и нулевыми ценами. 
    
    
    Параметры
    ---------
    df1 : DataFrame
        Год волны исследования.
        
    """
    bad_households1=[]
    for i in range(len(dfvar_1.columns)):
        ttt=dfvar_1.loc[dfvar_1.iloc[:,i].isin(['ЗАТРУДНЯЮСЬ ОТВЕТИТЬ','НЕТ ОТВЕТА',
                                                ' НЕТ ОТВЕТА',' ЗАТРУДНЯЮСЬ ОТВЕТИТЬ',
                                               'НЕТ ОТВЕТА+E7898','ОТКАЗ ОТ ОТВЕТА',
                                               'нет ответа'])].index
        bad_households1=[*bad_households1,*list(ttt)]
    
    bad_households2=[]
    for i in range(len(dfvar_2.columns)):
        ttt=dfvar_2.loc[dfvar_2.iloc[:,i].isin(['ЗАТРУДНЯЮСЬ ОТВЕТИТЬ','НЕТ ОТВЕТА',
                                                ' НЕТ ОТВЕТА',' ЗАТРУДНЯЮСЬ ОТВЕТИТЬ',
                                               'НЕТ ОТВЕТА+E7898','ОТКАЗ ОТ ОТВЕТА',
                                               'нет ответа'])].index
        bad_households2=[*bad_households2,*list(ttt)] 
            
    dfvar_1=dfvar_1.drop(list(set(bad_households1)|set(bad_households2))).copy()
    dfvar_1=dfvar_1.astype(str).replace('nan', '0').astype(float).copy()
    return dfvar_1

#==========================================================================================
# Нужна функция, котоаяр генерирует рабочий датафрейм с продуктами. 












